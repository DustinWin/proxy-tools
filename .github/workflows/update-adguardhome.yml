name: Update AdGuard Home
on:
  workflow_dispatch:
  schedule:
    - cron: "0 17 * * *"
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
      - ".github/workflows/delete-old-workflows.yml"
      - ".github/workflows/update-dashboard.yml"
      - ".github/workflows/update-mihomo.yml"
      - ".github/workflows/update-singbox.yml"

jobs:
  Update:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v5

      - name: Set variables
        run: |
          echo "download_url=https://github.com/AdguardTeam/AdGuardHome/releases/download" >> ${GITHUB_ENV}
          echo "release_version=$(curl -sSL https://api.github.com/repos/AdguardTeam/AdGuardHome/releases/latest | jq -r '.tag_name')" >> ${GITHUB_ENV}
          echo "release_time=$(curl -sSL https://api.github.com/repos/AdguardTeam/AdGuardHome/releases/latest | jq -r '.created_at' | xargs -I {} date -d '{} +8 hours' '+%Y-%m-%d')" >> ${GITHUB_ENV}
          echo "beta_version=$(curl -sSL https://api.github.com/repos/AdguardTeam/AdGuardHome/releases | jq -r '[.[] | select(.tag_name | contains("b"))][0].tag_name')" >> ${GITHUB_ENV}
          echo "beta_time=$(curl -sSL https://api.github.com/repos/AdguardTeam/AdGuardHome/releases | jq -r '[.[] | select(.tag_name | contains("b"))][0].created_at' | xargs -I {} date -d '{} +8 hours' '+%Y-%m-%d')" >> ${GITHUB_ENV}
        shell: bash

      - name: Compare `AdGuard Home` versions with current release
        run: |
          current_body=$(curl -sSL "https://api.github.com/repos/${{ github.repository }}/releases/tags/AdGuardHome" | jq -r '.body // ""')
          archs=(
            "AdGuard Home Release|${release_version}|${release_time}"
            "AdGuard Home Beta|${beta_version}|${beta_time}"
          )
          for arch in "${archs[@]}"; do
            IFS="|" read -r name version time <<< "$arch"
            var_name="${name// /_}_skip_update"
            if echo "${current_body}" | grep -q "${name}.*${version}.*${time}"; then
              echo "当前 ${name} 版本已是最新版本 ${version}，无需更新"
              eval "${var_name}=true"
            else
              echo "当前 ${name} 版本较低，需要更新最新版本至 ${version}"
              eval "${var_name}=false"
            fi
            eval "value=\$${var_name}"
            echo "${var_name}=${value}" >> ${GITHUB_ENV}
          done

      - name: Download `AdGuard Home Release` files
        if: ${{ env.AdGuard_Home_Release_skip_update != 'true' }}
        run: |
          # Linux
          mkdir -p ./AdGuardHome/
          old_name=(amd64 armv5 armv6 armv7 arm64 mips_softfloat mipsle_softfloat)
          new_name=(amd64 armv5 armv6 armv7 armv8 mips_softfloat mipsle_softfloat)
          for i in "${!old_name[@]}"; do
            mkdir -p "./tmp-release/release_linux_${old_name[i]}"
            curl -L "${download_url}/${release_version}/AdGuardHome_linux_${old_name[i]}.tar.gz" | tar -zx -C "./tmp-release/release_linux_${old_name[i]}"
            mv -f "./tmp-release/release_linux_${old_name[i]}/AdGuardHome/AdGuardHome" "./AdGuardHome/AdGuardHome_release_linux_${new_name[i]}"
          done
          chmod +x ./AdGuardHome/AdGuardHome_release_linux_*

          # Windows
          archs=(amd64 arm64)
          for arch in "${archs[@]}"; do
            mkdir -p "./tmp-release/release_windows_${arch}/"
            wget -P "./tmp-release/release_windows_${arch}/" "${download_url}/${release_version}/AdGuardHome_windows_${arch}.zip"
            unzip -o "./tmp-release/release_windows_${arch}/AdGuardHome_windows_${arch}.zip" -d "./tmp-release/release_windows_${arch}/"
            mv -f "./tmp-release/release_windows_${arch}/AdGuardHome/AdGuardHome.exe" "./AdGuardHome/AdGuardHome_release_windows_${arch}.exe"
          done
          rm -rf ./tmp-release*

      - name: Setup `upx` and compress `AdGuard Home Release` files
        if: ${{ env.AdGuard_Home_Release_skip_update != 'true' }}
        uses: crazy-max/ghaction-upx@v3
        with:
          version: latest
          files: ./AdGuardHome/AdGuardHome_release_linux*

      - name: Download `AdGuard Home Beta` files
        if: ${{ env.AdGuard_Home_Beta_skip_update != 'true' }}
        run: |
          # Linux
          mkdir -p ./AdGuardHome/
          old_name=(amd64 armv5 armv6 armv7 arm64 mips_softfloat mipsle_softfloat)
          new_name=(amd64 armv5 armv6 armv7 armv8 mips_softfloat mipsle_softfloat)
          for i in "${!old_name[@]}"; do
            mkdir -p "./tmp-beta/beta_linux_${old_name[i]}"
            curl -L "${download_url}/${beta_version}/AdGuardHome_linux_${old_name[i]}.tar.gz" | tar -zx -C "./tmp-beta/beta_linux_${old_name[i]}"
            mv -f "./tmp-beta/beta_linux_${old_name[i]}/AdGuardHome/AdGuardHome" "./AdGuardHome/AdGuardHome_beta_linux_${new_name[i]}"
          done
          chmod +x ./AdGuardHome/AdGuardHome_beta_linux_*

          # Windows
          archs=(amd64 arm64)
          for arch in "${archs[@]}"; do
            mkdir -p "./tmp-beta/beta_windows_${arch}/"
            wget -P "./tmp-beta/beta_windows_${arch}/" "${download_url}/${beta_version}/AdGuardHome_windows_${arch}.zip"
            unzip -o "./tmp-beta/beta_windows_${arch}/AdGuardHome_windows_${arch}.zip" -d "./tmp-beta/beta_windows_${arch}/"
            mv -f "./tmp-beta/beta_windows_${arch}/AdGuardHome/AdGuardHome.exe" "./AdGuardHome/AdGuardHome_beta_windows_${arch}.exe"
          done
          rm -rf ./tmp-beta*

      - name: Setup `upx` and compress `AdGuard Home Beta` files
        if: ${{ env.AdGuard_Home_Beta_skip_update != 'true' }}
        uses: crazy-max/ghaction-upx@v3
        with:
          version: latest
          files: ./AdGuardHome/AdGuardHome_beta_linux*

      - name: Check if `AdGuardHome` files exist
        run: |
          if ls ./AdGuardHome/* >/dev/null 2>&1; then
            echo "AdGuardHome 文件夹内存在新文件，需要上传"
            echo "adguardhome_exist=true" >> ${GITHUB_ENV}
          else
            echo "AdGuardHome 文件夹内没有新文件，无需上传"
            echo "adguardhome_exist=false" >> ${GITHUB_ENV}
          fi

      - name: Release and upload `AdGuardHome` assets
        if: ${{ env.adguardhome_exist == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: AdGuardHome
          tag: AdGuardHome
          overwrite: true
          body: |
            更新 [AdGuard Home Release 版](https://github.com/AdguardTeam/AdGuardHome/tree/beta-v0.107)至 ${{ env.release_version }}，发布于 ${{ env.release_time }}
            更新 [AdGuard Home Beta 版](https://github.com/AdguardTeam/AdGuardHome/tree/beta-v0.108)至 ${{ env.beta_version }}，发布于 ${{ env.beta_time }}
          file_glob: true
          file: ./AdGuardHome/*
